trigger:
  branches:
    include:
      - main
      - release/*

resources:
  containers:
    - container: Redis
      image: redis
      ports:
        - 6379:6379
  repositories:
    - repository: self

variables:
  buildConfiguration: Release

  root: "$(Build.SourcesDirectory)"
  buildProject: "$(root)/build/TwoTierCache.Build/TwoTierCache.Build.csproj"

  vmImageName: "ubuntu-latest"

stages:
  - stage: Build
    displayName: Build and publish stage
    jobs:
      - job: Build
        displayName: Build and publish
        pool:
          vmImage: $(vmImageName)
        services:
          Azurite: Redis
        steps:          
          - task: UseDotNet@2
            displayName: "Use .NET Core 6"
            inputs:
              version: "6.x"
          - task: DotNetCoreCLI@2
            displayName: Restore
            inputs:
              command: restore
              projects: $(buildProject)
          - task: DotNetCoreCLI@2
            displayName: Build
            inputs:
              projects: $(buildProject)
              arguments: '--configuration $(buildConfiguration) --no-restore'
          - task: DotNetCoreCLI@2
            displayName: Test
            inputs:
              command: test
              projects: $(buildProject)
              arguments: '--configuration $(buildConfiguration) --no-build --no-restore --collect:"XPlat Code Coverage" --settings $(root)/coverlet.runsettings.xml'
          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: 'cobertura'
              summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
          - task: DotNetCoreCLI@2
            displayName: Pack
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
            inputs:
              command: pack
              packagesToPack: '$(root)/src/**/*.csproj'
              arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) --no-restore'
              nobuild: true
              versioningScheme: 'off'
          - task: NuGetAuthenticate@0
            displayName: 'Authenticate on NuGet.org'
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
            inputs:
              nugetServiceConnections: 'NuGetOrgConnection'
          - task: NuGetCommand@2
            displayName: Push
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
            inputs:
              command: push
              nuGetFeedType: 'external'              
              allowPackageConflicts: true
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: "drop"
              publishLocation: "Container"
              